extends layout

block scripts
  script(type='text/javascript', src='cubism.v1.js')
  script(type='text/javascript', src='highlight.min.js')

block content
  div(style="margin-bottom: 12px")
  div(style="height:2px;")
    select#statsGraphSelect
      option(value="deltaPacketsPerSec") Packets/Sec
      option(value="deltaBytesPerSec") Bytes/Sec
      option(value="deltaBitsPerSec") Bits/Sec
      option(value="deltaSessionsPerSec") Sessions/Sec
      option(value="deltaDroppedPerSec") Input Dropped/Sec
      option(value="monitoring") Active Sessions
      option(value="tcpSessions") Active TCP Sessions
      option(value="udpSessions") Active UDP Sessions
      option(value="icmpSessions") Active ICMP Sessions
      option(value="freeSpaceM") Free Space MB
      option(value="freeSpaceP") Free Space %
      option(value="memory") Memory
      option(value="memoryP") Memory %
      option(value="cpu") CPU
      option(value="diskQueue") Disk Queue
      option(value="esQueue") ES Queue
      option(value="packetQueue") Packet Queue
      option(value="closeQueue") Closing Queue
      option(value="needSave") Waiting Queue
      option(value="fragsQueue") Fragments Queue
      option(value="frags") Active Fragments
      option(value="deltaFragsDroppedPerSec") Fragments Dropped/Sec
      option(value="deltaOverloadDroppedPerSec") Overload Dropped/Sec
      option(value="deltaTotalDroppedPerSec") Total Dropped/Sec
  div#statsGraph
  table#stats.hidden(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
    thead
      tr
        th
        th Node
        th Time
        th Packets Captured
        th Kilobytes Saved
        th Sessions Saved
        th Active Sessions
        th TCP Active
        th UDP Active
        th ICMP Active
        th Free Space MB
        th Free Space %
        th Memory MB
        th Memory %
        th CPU
        th Packets / Sec
        th Bytes / Sec
        th Bits / Sec
        th Sessions / Sec
        th Input Drops / Sec
        th Disk Queue
        th ES Queue
        th Packet Queue
        th Closing Queue
        th Waiting Queue
        th Fragments Queue
        th Fragments Active
        th Fragments Drop / Sec
        th Overload Drops / Sec
        th Packet Drops / Sec
    tbody
    tfoot
      tr#avg
        th
        th Average
        th
        th#avg_totalPackets
        th#avg_totalK
        th#avg_totalSessions
        th#avg_monitoring
        th#avg_tcpSessions
        th#avg_udpSessions
        th#avg_icmpSessions
        th#avg_freeSpaceM
        th#avg_freeSpaceP
        th#avg_memory
        th#avg_memoryP
        th#avg_cpu
        th#avg_deltaPacketsPerSec
        th#avg_deltaBytesPerSec
        th#avg_deltaBitsPerSec
        th#avg_deltaSessionsPerSec
        th#avg_deltaDroppedPerSec
        th#avg_diskQueue
        th#avg_esQueue
        th#avg_packetQueue
        th#avg_closeQueue
        th#avg_needSave
        th#avg_fragsQueue
        th#avg_frags
        th#avg_deltaFragsDroppedPerSec
        th#avg_deltaOverloadDroppedPerSec
        th#avg_deltaTotalDroppedPerSec
      tr#tot
        th
        th Total
        th
        th#tot_totalPackets
        th#tot_totalK
        th#tot_totalSessions
        th#tot_monitoring
        th#tot_tcpSessions
        th#tot_udpSessions
        th#tot_icmpSessions
        th#tot_freeSpaceM
        th#tot_freeSpaceP
        th#tot_memory
        th#tot_memoryP
        th#tot_cpu
        th#tot_deltaPacketsPerSec
        th#tot_deltaBytesPerSec
        th#tot_deltaBitsPerSec
        th#tot_deltaSessionsPerSec
        th#tot_deltaDroppedPerSec
        th#tot_diskQueue
        th#tot_esQueue
        th#tot_packetQueue
        th#tot_closeQueue
        th#tot_needSave
        th#tot_fragsQueue
        th#tot_frags
        th#tot_deltaFragsDroppedPerSec
        th#tot_deltaOverloadDroppedPerSec
        th#tot_deltaTotalDroppedPerSec
  br
  h1 Elasticsearch
  table#esstats.hidden(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
    thead
      tr
        th Node
        th Documents
        th Disk Storage (MB)
        th Heap Size (MB)
        th OS Load
        th ES CPU (%)
        th Read/Sec (K)
        th Write/Sec (K)
        th Searches
    tbody
    tfoot
      tr#avges
        th Average
        th#esavgdocs
        th#esavgdisk
        th#esavgheap
        th#esavgload
        th#esavgcpu
        th#esavgread
        th#esavgwrite
        th#esavgsearches
      tr#totes
        th Total
        th#estotdocs
        th#estotdisk
        th#estotheap
        th#estotload
        th#estotcpu
        th#estotread
        th#estotwrite
        th#estotsearches
  br


  script(type='text/javascript').
    var statsTable;
    var esstatsTable;

    var context = cubism.context()
        .serverDelay(0)
        .clientDelay(0)
        .step(5e3)
        .size(1440);

    function makeStatsGraph(metricName) {
      function metric(name) {
        return context.metric(function(startV, stopV, stepV, callback) {
          $.ajax( {
            "dataType": 'json',
            "type": "GET",
            "url": "#{basePath}dstats.json?nodeName=" + name +
                          "&start=" + startV/1000 +
                          "&stop=" + stopV/1000 +
                          "&step=" + stepV/1000 +
                          "&interval=5" +
                          "&name=" + metricName,
            "success": function(data) {
              if (metricName === "cpu") {
                for (i = 0; i < data.length; i++) {
                  data[i] = data[i]/100.0;
                }
              }
              callback(null, data);
            }
          });
        }, name);
      }

      $("#statsGraph").empty();
      d3.select("#statsGraph").call(function(div) {
        var nodes = !{JSON.stringify(nodes)};
        var metrics = [];
        for (var i = 0, ilen = nodes.length; i < ilen; i++) {
          metrics.push(metric(nodes[i]));
        }

        div.append("div")
            .attr("class", "axis")
            .call(context.axis().orient("top"));

        div.selectAll(".horizon")
            .data(metrics)
          .enter().append("div")
            .attr("class", "horizon")
            .call(context.horizon());

        div.append("div")
            .attr("class", "rule")
            .call(context.rule());

      });
    }

    makeStatsGraph("deltaPackets");

    context.on("focus", function(i) {
        d3.selectAll(".value").style("right", i === null ? null : context.size() - i + "px");
    });

    function numberRender(data, type, row, meta) {
      if (type === "display") {
        return numberWithCommas(data);
      } else {
        return data;
      }
    }

    function numberRenderM(data, type, row, meta) {
      if (type === "display") {
        return numberWithCommas(Math.ceil(data/1000000));
      } else {
        return data;
      }
    }

    function dateRender(data, type, row, meta) {
      if (type === "display") {
        return dateString(data, " ");
      } else {
        return data;
      }
    }




    $(document).ready(function() {
      statsTable = $('#stats')
      .on ("preInit.dt", function (e) {
        loadTableState($(e.target).DataTable(), ["", "Node", "Time", "Packets Captured", "Active Sessions", "Free Space %", "Memory MB", "CPU", "Packet Queue", "Packets / Sec", "Bytes / Sec", "Sessions / Sec", "Packet Drops / Sec"]);
      })
      .DataTable( {
        language: {
          processing: "<img src=\"watching.gif\"><div class='blink'>I'm Hootin' :D</div>",
          lengthMenu: "_MENU_",
          search: "Node filter: "
        },
        dom: '<"fg-toolbar ui-widget-header ui-helper-clearfix"ipfr>t<"fg-toolbar ui-widget-header ui-helper-clearfix"ipB>',
        paginationType: "full_numbers",
        pageLength: 500,
        lengthMenu: [100, 500, 1000, 5000],
        retrieve: true,
        scrollCollapse: true,
        autoWidth: false,
        colReorder: {
          fixedColumnsLeft: 2
        },
        buttons: {
          dom: {
            container: {
              className: 'dataTables_paginate paging_full_numbers'
            }
          },
          buttons: [
            {
              className: 'paginate_button',
              extend: 'colvis',
              columns: ':gt(1)',
              collectionLayout: 'fixed two-column'
            }
          ]
        },
        columns: [
          {
            data : null,
            width: "30",
            sortable: false,
            render: function (data, type, row, meta) {
              if (statsTable.row(meta.row).child.isShown()) {
                return '<img src="images/details_close.png" height="20px">';
              } else {
                return '<img src="images/details_open.png" height="20px">';
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "id",
            type: "string",
            className: "right",
            searchable: true
          },
          {
            data : "currentTime",
            render: dateRender,
            className: "right",
            searchable: false
          },
          {
            data : "totalPackets",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "totalK",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "totalSessions",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "monitoring",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "tcpSessions",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "udpSessions",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "icmpSessions",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "freeSpaceM",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "freeSpaceP",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return data.toFixed(2);
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "memory",
            render: numberRenderM,
            className: "right",
            searchable: false
          },
          {
            data : "memoryP",
            className: "right",
            searchable: false
          },
          {
            data : "cpu",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return (data/100.0).toFixed(2);
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "deltaPacketsPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaBytesPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaBitsPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaSessionsPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "diskQueue",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return numberWithCommas(Math.ceil(data));
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "esQueue",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "packetQueue",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "closeQueue",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "needSave",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "fragsQueue",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "frags",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaFragsDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaOverloadDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "deltaTotalDroppedPerSec",
            render: numberRender,
            className: "right",
            searchable: false
          }
        ],
        order: [[1, "asc"]],
        footerCallback: function ( nRow, aaData, iStart, iEnd, aiDisplay ) {
          var avgCells = $('tr#avg > th');
          var totCells = $('tr#tot > th');

          var totals = {};
          var keys = ["totalPackets", "totalK", "totalSessions",
                      "monitoring", "tcpSessions", "udpSessions", "icmpSessions",
                      "freeSpaceM", "freeSpaceP", "memory", "memoryP", "frags", "cpu",
                      "diskQueue", "esQueue", "packetQueue", "closeQueue", "needSave", "fragsQueue",
                      "deltaDroppedPerSec", "deltaSessionsPerSec", "deltaPacketsPerSec", "deltaBytesPerSec", "deltaBitsPerSec", "deltaFragsDroppedPerSec", "deltaOverloadDroppedPerSec", "deltaTotalDroppedPerSec"];

          keys.forEach(function(key) {
            totals[key] = 0;
            for (var r = 0, rlen = aiDisplay.length; r < rlen; r++) {
              totals[key] += aaData[aiDisplay[r]][key];
            }

            if (key === "cpu") {
              $("#tot_" + key).html("" + (totals[key]/100.0).toFixed(2));
              $("#avg_" + key).html("" + ((totals[key]/aiDisplay.length)/100).toFixed(2));
            } else if (key === "freeSpaceP" || key === "memoryP") {
              $("#tot_" + key).html(numberWithCommas(totals[key].toFixed(2)));
              $("#avg_" + key).html(numberWithCommas((totals[key]/aiDisplay.length).toFixed(2)));
            } else if (key === "memory") {
              $("#tot_" + key).html(numberWithCommas(Math.ceil(totals[key]/1000000)));
              $("#avg_" + key).html(numberWithCommas(Math.ceil((totals[key]/aiDisplay.length)/1000000)));
            } else {
              $("#tot_" + key).html(numberWithCommas(totals[key]));
              $("#avg_" + key).html(numberWithCommas(Math.floor(totals[key]/aiDisplay.length)));
            }
          });
        }
      } );

      esstatsTable = $('#esstats')
      .on ("preInit.dt", function (e) {
        loadTableState($(e.target).DataTable(), undefined);
      })
      .DataTable( {
        language: {
          processing: "<img src=\"watching.gif\"><div class='blink'>I'm Hootin' :D</div>",
          lengthMenu: "_MENU_",
          search: "Node filter: "
        },
        dom: '<"fg-toolbar ui-widget-header ui-helper-clearfix"ipfr>t<"fg-toolbar ui-widget-header ui-helper-clearfix"ipB>',
        paginationType: "full_numbers",
        pageLength: 500,
        lengthMenu: [100, 500, 1000, 5000],
        scrollCollapse: true,
        autoWidth: false,
        colReorder: {
          fixedColumnsLeft: 1
        },
        buttons: {
          dom: {
            container: {
              className: 'dataTables_paginate paging_full_numbers'
            }
          },
          buttons: [
            {
              className: 'paginate_button',
              extend: 'colvis',
              columns: ':gt(0)',
              collectionLayout: 'fixed two-column'
            }
          ]
        },
        columns: [
          {
            data : "name",
            className: "right",
            type: "string",
            searchable: true
          },
          {
            data : "docs",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "storeSize",
            render: numberRenderM,
            className: "right",
            searchable: false
          },
          {
            data : "heapSize",
            render: numberRenderM,
            className: "right",
            searchable: false
          },
          {
            data : "load",
            render: function (data, type, row, meta) {
              if (type === "display") {
                return data.toFixed(2);
              } else {
                return data;
              }
            },
            className: "right",
            searchable: false
          },
          {
            data : "cpu",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "read",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "write",
            render: numberRender,
            className: "right",
            searchable: false
          },
          {
            data : "searches",
            render: numberRender,
            className: "right",
            searchable: false
          }
        ],
        order: [[3, "desc"]],
        footerCallback: function ( nRow, aaData, iStart, iEnd, aiDisplay ) {
          var totals = {docs: 0, storeSize: 0, heapSize:0, load: 0, cpu:0, read:0, write:0, searches:0};
          for (var a = 0, alen = aiDisplay.length; a < alen; a++) {
            var r = aiDisplay[a];
            totals.docs += aaData[r].docs;
            totals.storeSize += aaData[r].storeSize;
            totals.heapSize += aaData[r].heapSize;
            totals.cpu += aaData[r].cpu;
            totals.read += aaData[r].read;
            totals.write += aaData[r].write;
            totals.searches += aaData[r].searches;
            totals.load += aaData[r].load;
          }

          $("#estotdocs").html(numberWithCommas(totals.docs));
          $("#estotdisk").html(numberWithCommas(Math.ceil(totals.storeSize/1000000)));
          $("#estotheap").html(numberWithCommas(Math.ceil(totals.heapSize/1000000)));
          $("#estotload").html(totals.load.toFixed(2));
          $("#estotcpu").html(numberWithCommas(totals.cpu));
          $("#estotread").html(numberWithCommas(totals.read));
          $("#estotwrite").html(numberWithCommas(totals.write));
          $("#estotsearches").html(numberWithCommas(totals.searches));

          $("#esavgdocs").html(numberWithCommas(Math.floor(totals.docs/aiDisplay.length)));
          $("#esavgdisk").html(numberWithCommas(Math.floor(totals.storeSize/aiDisplay.length/1000000)));
          $("#esavgheap").html(numberWithCommas(Math.floor(totals.heapSize/aiDisplay.length/1000000)));
          $("#esavgload").html((totals.load/aiDisplay.length).toFixed(2));
          $("#esavgcpu").html(numberWithCommas(Math.floor(totals.cpu/aiDisplay.length)));
          $("#esavgread").html(numberWithCommas(Math.floor(totals.read/aiDisplay.length)));
          $("#esavgwrite").html(numberWithCommas(Math.floor(totals.write/aiDisplay.length)));
          $("#esavgsearches").html(numberWithCommas(Math.floor(totals.searches/aiDisplay.length)));
        }
      } );

      $(document).on('click', '#stats tbody td img', function () {
        var nTr = this.parentNode.parentNode;
        var row = statsTable.row(nTr);
        if (row.child.isShown()) {
          this.src = "images/details_open.png";
          row.child.hide();
        } else {
          this.src = "images/details_close.png";
          $.ajax( {
            "dataType": 'html',
            "type": "GET",
            "url": '#{basePath}' + row.data().id + '/statsDetail',
            "success": function(data) {
              statsTable.row(nTr).child(data, 'details').show();
            }
          } );

        }
      } );

      function reloadData() {
        $.ajax( {
          "dataType": 'json',
          "type": "GET",
          "url": '#{basePath}stats.json',
          "success": function(data) {
            var nNodes = statsTable.rows().nodes().flatten().toArray();
            for (var i = 0, ilen = data.data.length; i < ilen; i++) {
              var found = false;
              for (var n = 0, nlen = nNodes.length; n < nlen; n++) {
                var id = statsTable.cell(n, 1).data();
                if (id === data.data[i].id) {
                  found = true;
                  statsTable.row(n).data(data.data[i]);
                  break;
                }
              }
              if (!found) {
                statsTable.row.add(data.data[i]);
              }
            }
            statsTable.draw();
          }
        } );

        $.ajax( {
          "dataType": 'json',
          "type": "GET",
          "url": '#{basePath}esstats.json',
          "success": function(data) {
            updateHealth(data.health);
            var nNodes = esstatsTable.rows().nodes().flatten().toArray();
            for (var i = 0, ilen = data.data.length; i < ilen; i++) {
              var found = false;
              for (var n = 0, nlen = nNodes.length; n < nlen; n++) {
                var name = esstatsTable.cell(n, 0).data();
                if (name === data.data[i].name) {
                  found = true;
                  esstatsTable.row(n).data(data.data[i]);
                  break;
                }
              }
              if (!found) {
                esstatsTable.row.add(data.data[i]);
              }
            }
            esstatsTable.draw();
          }
        } );
      }

      $('#statsGraphSelect').change(function() {
        makeStatsGraph($('#statsGraphSelect').val());
        return false;
      });

      setInterval(reloadData, 5000);
      reloadData();
    } );
